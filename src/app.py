from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field
import joblib
import numpy as np
import os

# Charger le mod√®le
MODEL_PATH = "model.joblib"

if not os.path.exists(MODEL_PATH):
    raise Exception(f"‚ùå Fichier mod√®le {MODEL_PATH} non trouv√©. Entra√Ænez le mod√®le avant de lancer l'API.")

model = joblib.load(MODEL_PATH)

# Initialisation de l'application FastAPI
app = FastAPI(title="Churn Prediction API", description="API pour pr√©dire le churn des clients.")

# D√©finition du format des donn√©es d'entr√©e avec les variables sp√©cifiques
class PredictionInput(BaseModel):
    account_length: int = Field(..., alias="Account length")
    number_vmail_messages: int = Field(..., alias="Number vmail messages")
    total_day_calls: int = Field(..., alias="Total day calls")
    total_day_charge: float = Field(..., alias="Total day charge")
    total_eve_calls: int = Field(..., alias="Total eve calls")
    total_eve_charge: float = Field(..., alias="Total eve charge")
    total_night_calls: int = Field(..., alias="Total night calls")
    total_night_charge: float = Field(..., alias="Total night charge")
    total_intl_calls: int = Field(..., alias="Total intl calls")
    total_intl_charge: float = Field(..., alias="Total intl charge")
    customer_service_calls: int = Field(..., alias="Customer service calls")
    international_plan: int = Field(..., alias="International plan")
    voice_mail_plan: int = Field(..., alias="Voice mail plan")

    class Config:
        # Permet de sp√©cifier l'utilisation de l'alias pour l'input et l'output
        allow_population_by_field_name = True

@app.post("/predict")
def predict(data: PredictionInput):
    """Effectue une pr√©diction en utilisant le mod√®le ML."""
    try:

        # Pr√©parer les features √† partir des valeurs re√ßues dans la requ√™te
        features = np.array([[
            data.account_length,
            data.number_vmail_messages,
            data.total_day_calls,
            data.total_day_charge,
            data.total_eve_calls,
            data.total_eve_charge,
            data.total_night_calls,
            data.total_night_charge,
            data.total_intl_calls,
            data.total_intl_charge,
            data.customer_service_calls,
            data.international_plan,
            data.voice_mail_plan
        ]])

        # Pr√©diction avec le mod√®le
        prediction = model.predict(features)[0]

        # Retourner seulement la pr√©diction
        return {"prediction": "Churn" if prediction == 1 else "No Churn"}

    except Exception as e:
        raise HTTPException(status_code=400, detail=f"Erreur lors de la pr√©diction : {str(e)}")

# Route de test
@app.get("/")
def root():
    return {"message": "üöÄ L'API est en ligne ! Utilisez /predict pour effectuer des pr√©dictions."}

