name: CI/CD Pipeline

on:
  push:
    branches:
      - master  # Le workflow s'exécute à chaque "push" sur la branche master
  pull_request:
    branches:
      - master  # Le workflow s'exécute à chaque PR vers la branche master

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      # 1. Vérification du dépôt (Clone le code)
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configuration de Python (choix de la version)
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      # 3. Créer l'environnement virtuel et installer les dépendances
      - name: Install dependencies
        run: |
          python3 -m venv venv
          . venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt  # Assurez-vous que `mlflow` est dans requirements.txt

  mlflow:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Créer l'environnement virtuel et installer MLflow et autres dépendances
      - name: Set up Python environment for MLflow
        run: |
          python3 -m venv venv
          . venv/bin/activate
          pip install --upgrade pip
          pip install mlflow  # Assurez-vous d'installer mlflow
          pip install -r requirements.txt  # Installer les autres dépendances nécessaires

      # 3. Démarrer le serveur MLflow
      - name: Start MLflow Server
        run: |
          . venv/bin/activate  # Activation de l'environnement virtuel
          mlflow ui --host 0.0.0.0 --port 5000 & 
          echo "Attente que le serveur MLflow soit prêt..."
          # Attendre que le serveur MLflow soit prêt avant de continuer
          while ! curl -s http://127.0.0.1:5000; do
            echo "Serveur MLflow pas encore prêt, réessayer dans 5 secondes..."
            sleep 5
          done
          echo "Serveur MLflow est prêt"

      # 4. Préparer les données
      - name: Prepare data
        run: |
          . venv/bin/activate  # Activation de l'environnement virtuel
          python src/main.py --prepare --train_path data/churn-bigml-80.csv --test_path data/churn-bigml-20.csv

      # 5. Entraîner le modèle
      - name: Train model
        run: |
          . venv/bin/activate  # Activation de l'environnement virtuel
          python src/main.py --train --train_path data/churn-bigml-80.csv --test_path data/churn-bigml-20.csv

      # 6. Évaluer le modèle
      - name: Evaluate model
        run: |
          . venv/bin/activate  # Activation de l'environnement virtuel
          python src/main.py --evaluate --train_path data/churn-bigml-80.csv --test_path data/churn-bigml-20.csv

  docker:
    runs-on: ubuntu-latest

    steps:
      # 1. Vérification du dépôt
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Installer Docker Buildx (pour supporter la construction des images)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. Connexion à DockerHub (ajoute les secrets `DOCKER_USERNAME` et `DOCKER_PASSWORD` dans les settings de GitHub)
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4. Construire et pousser l'image Docker
      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/eya_ben_hammouda_4ds4 .
          docker tag eya_ben_hammouda_4ds4 ${{ secrets.DOCKER_USERNAME }}/eya_ben_hammouda_4ds4
          docker push ${{ secrets.DOCKER_USERNAME }}/eya_ben_hammouda_4ds4

