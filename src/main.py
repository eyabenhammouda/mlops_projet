import argparse
import logging
import mlflow
import mlflow.sklearn
from mlflow.tracking import MlflowClient
from elasticsearch import Elasticsearch
from model_pipeline import prepare_data, train_model, evaluate_model, save_model, load_model
# üîó Connexion √† Elasticsearch
def connect_to_elasticsearch():
    """√âtablit une connexion √† Elasticsearch"""
    try:
        es = Elasticsearch("http://172.18.0.2:9200", verify_certs=False) 
        if es.ping():
            print("‚úÖ Connexion r√©ussie √† Elasticsearch")
            return es
        else:
            print("‚ùå Impossible de se connecter √† Elasticsearch")
            return None
    except Exception as e:   
        print(f"‚ö†Ô∏è Erreur de connexion √† Elasticsearch : {e}")
        return None
        

# Configuration du logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
mlflow.set_tracking_uri("http://127.0.0.1:5000")  # URI de suivi MLflow
mlflow.set_experiment("Churn Prediction")  # Nom de l'exp√©rience MLflow
MODEL_NAME = "Churn_Prediction_Model"  # Nom du mod√®le dans le Model Registry
# üì° Envoi des logs √† Elasticsearch
def log_to_elasticsearch(run_id, stage, metrics, params):
    """Envoie les logs MLflow √† Elasticsearch"""
    es = connect_to_elasticsearch()
    if es is None:
        print("üö® Elasticsearch non disponible, logs non envoy√©s.")
        return

    log_data = {
        "run_id": run_id,
        "stage": stage,
        "metrics": metrics,
        "params": params
    }

    try:
        es.index(index="mlflow-metriques", body=log_data)  # Correction du Content-Type automatique
        print(f"üì° Logs envoy√©s √† Elasticsearch : {log_data}")
    except Exception as e:
        print(f"‚ö†Ô∏è √âchec de l'envoi des logs √† Elasticsearch : {e}")


def list_model_versions():
    """Lister toutes les versions du mod√®le enregistr√©es dans MLflow."""
    client = MlflowClient()
    versions = client.search_model_versions(f"name='{MODEL_NAME}'")
    print("\nüìå *Versions du mod√®le enregistr√©es dans MLflow:*")
    for v in versions:
        print(f"üîπ Version: {v.version}, Status: {v.current_stage}, Run ID: {v.run_id}, Date: {v.creation_timestamp}")

def transition_model_stage(model_name, model_version, stage):
    """Changer le stage du mod√®le (Staging, Production, Archived)"""
    client = MlflowClient()
    client.transition_model_version_stage(
        name=model_name,
        version=model_version,
        stage=stage
    )
    logging.info(f"Mod√®le {model_name} (version {model_version}) est maintenant en '{stage}' !")

def main():
    """
    Pipeline de Machine Learning pour la pr√©diction du churn :
    - Pr√©traitement des donn√©es
    - Entra√Ænement du mod√®le
    - √âvaluation
    - Enregistrement du mod√®le dans MLflow
    - Gestion des versions dans le Model Registry
    """
    parser = argparse.ArgumentParser(description="Pipeline de pr√©diction du churn.")

    # Arguments du script
    parser.add_argument("--prepare", action="store_true", help="Pr√©parer les donn√©es.")
    parser.add_argument("--train", action="store_true", help="Entra√Æner le mod√®le.")
    parser.add_argument("--evaluate", action="store_true", help="√âvaluer le mod√®le.")
    parser.add_argument("--save", type=str, help="Sauvegarder le mod√®le dans un fichier.")
    parser.add_argument("--load", type=str, help="Charger un mod√®le existant.")
    parser.add_argument("--train_path", type=str, required=True, help="Chemin du fichier CSV d'entra√Ænement.")
    parser.add_argument("--test_path", type=str, required=True, help="Chemin du fichier CSV de test.")
    parser.add_argument("--stage", type=str, choices=["Staging", "Production", "Archived"], help="Stage auquel promouvoir le mod√®le.")
    
    args = parser.parse_args()

    logging.info("üîÑ Pr√©paration des donn√©es...")
    X_train, X_test, y_train, y_test = prepare_data(args.train_path, args.test_path)

    with mlflow.start_run() as run:
        # Entra√Ænement du mod√®le
        logging.info("üöÄ Entra√Ænement du mod√®le...")
        model = train_model(X_train, y_train)

        # Enregistrement des param√®tres et du mod√®le dans MLflow
        mlflow.sklearn.log_model(model, "churn_model")

        # R√©cup√©ration du mod√®le √† partir de l'URI du run
        model_uri = f"runs:/{run.info.run_id}/churn_model"
        logging.info(f"üíæ Mod√®le enregistr√© sous l'URI : {model_uri}")

        # Ajout du mod√®le au Model Registry avec une nouvelle version
        logging.info("üì• Enregistrement du mod√®le dans le Model Registry...")
        registered_model = mlflow.register_model(model_uri, MODEL_NAME)
        logging.info(f"‚úÖ Mod√®le '{MODEL_NAME}' enregistr√© avec la version {registered_model.version}.")

        # Afficher les versions enregistr√©es
        list_model_versions()

        # Calcul des m√©triques
        logging.info("üìä √âvaluation du mod√®le...")
        accuracy, precision, recall, f1 = evaluate_model(model, X_test, y_test)

        # Afficher les r√©sultats
        result_message = (
            f"‚úÖ R√©sultats de l'√©valuation :\n"
            f"- Accuracy: {accuracy:.4f}\n"
            f"- Precision: {precision:.4f}\n"
            f"- Recall: {recall:.4f}\n"
            f"- F1-score: {f1:.4f}"
        )
        logging.info(result_message)
        print(result_message)

        # Loguer les m√©triques dans MLflow
        mlflow.log_metric("accuracy", accuracy)
        mlflow.log_metric("precision", precision)
        mlflow.log_metric("recall", recall)
        mlflow.log_metric("f1_score", f1)
        # üì° Envoi des logs √† Elasticsearch
        log_to_elasticsearch(
            run.info.run_id,
            args.stage,
            {"accuracy": accuracy, "precision": precision, "recall": recall, "f1_score": f1},
            {"n_estimators": 100, "max_depth":1 }
        )

        # Promotion du mod√®le au stage sp√©cifi√© par l'utilisateur
        if args.stage:
            transition_model_stage(MODEL_NAME, registered_model.version, args.stage)

if __name__ == "__main__":
    main()
